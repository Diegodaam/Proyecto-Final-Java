
package com.mycompany.proyectofinal;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Font;
import javax.swing.BorderFactory;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.SwingConstants;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author dm205
 */
public class Reporte extends javax.swing.JInternalFrame {
    
ListSubject list ;
        
private float promedio;
private float p1 ;
private float p2 ;
private float p3 ;
private String materia;
String tipo;

public Reporte(ListSubject lista) {
    this.list = lista;
    
    
        initComponents();
    
    // Crear modelo de tabla con 5 columnas
    DefaultTableModel model = new DefaultTableModel();
    String[] columnas = {"Materias", "Parcial 1", "Parcial 2", "Parcial 3", "Situación"};
    model.setColumnIdentifiers(columnas);
    
    // Verificar si la lista existe y tiene datos
    if (lista != null && lista.head != null) {
        NodoSubjects aux = lista.head;
        
        while (aux != null) {
            // Obtener datos del nodo actual
            materia = aux.getSubject();
            tipo = aux.getType();
            p1 = aux.getPartial1();
            p2 = aux.getPartial2();
            p3 = aux.getPartial3();
            
            // Calcular situación basada en el tipo de ponderación
            String situacion = calcularSituacion(tipo, p1, p2, p3);
            
            // Añadir fila a la tabla con las 5 columnas
            model.addRow(new Object[]{ materia,p1,p2,p3,situacion});
              
            
            // Mover al siguiente nodo
            aux = aux.getNext();
        }
    } else {
        // Mensaje si no hay datos
        
        
        model.addRow(new Object[]{"", "", "", "", "No hay materias registradas"});
    }
   
    // Asignar modelo a la tabla
   jTable1.setModel(model);
    
    // Ajustar tamaño de columnas
    ajustarAnchoColumnas();
}

// Método para calcular la situación según el tipo de ponderación
private String calcularSituacion(String tipo, float p1, float p2, float p3) {
    //float promedio;
    String tipoNormalizado = tipo.toUpperCase();
    
    // Calcular promedio ponderado según el tipo
    switch (tipoNormalizado) {
        case "TIPO A":
            promedio = (p1 * 0.33f) + (p2 * 0.33f) + (p3 * 0.34f);
            break;
        case "TIPO B":
            promedio = (p1 * 0.20f) + (p2 * 0.35f) + (p3 * 0.45f);
            break;
        case "TIPO C":
            promedio = (p1 * 0.25f) + (p2 * 0.25f) + (p3 * 0.50f);
            break;
        default:
            // Si el tipo no coincide, usar promedio simple
            promedio = (p1 + p2 + p3) / 3;
    }
    
    // Determinar la situación basada en el promedio
    if (promedio >= 90) return "EXCELENTE";
    else if (promedio >= 80) return "MUY BUENA";
    else if (promedio >= 70) return "BUENA";
    else if (promedio >= 60) return "REGULAR";
    else return "REPROBADO";
}

// Método para ajustar el ancho de las columnas
private void ajustarAnchoColumnas() {
    // Ajustar el ancho preferido de cada columna
    jTable1.getColumnModel().getColumn(0).setPreferredWidth(150); // Materia (más ancho)
    jTable1.getColumnModel().getColumn(1).setPreferredWidth(80);  // Parcial 1
    jTable1.getColumnModel().getColumn(2).setPreferredWidth(80);  // Parcial 2
    jTable1.getColumnModel().getColumn(3).setPreferredWidth(80);  // Parcial 3
    jTable1.getColumnModel().getColumn(4).setPreferredWidth(200); // Situación

    }
    
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentHidden(java.awt.event.ComponentEvent evt) {
                formComponentHidden(evt);
            }
        });
        getContentPane().setLayout(null);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(jTable1);

        getContentPane().add(jScrollPane1);
        jScrollPane1.setBounds(20, 20, 550, 110);

        jButton1.setText("Recomendacion");
        jButton1.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                jButton1MouseMoved(evt);
            }
        });
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1);
        jButton1.setBounds(220, 140, 140, 30);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formComponentHidden(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentHidden
        // TODO add your handling code here:
    }//GEN-LAST:event_formComponentHidden

    private void jButton1MouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MouseMoved
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton1MouseMoved

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

         int filaSeleccionada = jTable1.getSelectedRow();
    
    if (filaSeleccionada == -1) {
        // Si no hay fila seleccionada, mostrar advertencia
        JOptionPane.showMessageDialog(this, 
            "Por favor seleccione una materia primero", 
            "Selección requerida", 
            JOptionPane.WARNING_MESSAGE);
        return;
        
    }//GEN-LAST:event_jButton1ActionPerformed

    
      String materia1 = (String) jTable1.getValueAt(filaSeleccionada, 0); // Columna 0: Materias
    String situacion = (String) jTable1.getValueAt(filaSeleccionada, 4); // Columna 4: Situación
    
    // PASO 3: Generar la recomendación basada en la situación académica
    String recomendacion = generarRecomendacion(situacion, materia1);
    
    // PASO 4: Crear y configurar el panel de visualización
    JPanel panel = new JPanel(new BorderLayout(50, 50));
    panel.setBorder(BorderFactory.createEmptyBorder(40, 40, 40, 40));
    
    //Personalizar el color de fondo según la situación
    Color colorFondo;
    if (situacion.equals("EXCELENTE")) {
        colorFondo = new Color(220, 255, 220); // Verde claro
    } else if (situacion.equals("MUY BUENA") || situacion.equals("BUENA")) {
        colorFondo = new Color(220, 240, 255); // Azul claro
    } else if (situacion.equals("REGULAR")) {
        colorFondo = new Color(255, 255, 200); // Amarillo claro
    } else {
        colorFondo = new Color(255, 220, 220); // Rojo claro
    }
    panel.setBackground(colorFondo);
    
    //Crear el área de texto para la recomendación
    JTextArea texto = new JTextArea(recomendacion);
    texto.setEditable(false);
    texto.setLineWrap(true);  // Ajuste automático de líneas
    texto.setWrapStyleWord(true);  // No cortar palabras
    texto.setBackground(colorFondo);
    texto.setFont(new Font("Arial", Font.PLAIN, 12));
    
    //Añadir componentes al panel
    panel.add(new JLabel("Recomendación para: " + materia, SwingConstants.CENTER), BorderLayout.NORTH);
    panel.add(new JScrollPane(texto), BorderLayout.CENTER);  // Con scroll por si el texto es largo
    
    // Mostrar el diálogo con la recomendación
    JOptionPane.showMessageDialog(this, 
        panel, 
        "Recomendación Académica", 
        JOptionPane.INFORMATION_MESSAGE);
}

// Método que genera el texto de recomendación según la situación
private String generarRecomendacion(String situacion, String materia) {
    // PARTE CENTRAL: Generar mensaje personalizado según cada situación
    switch (situacion) {
        case "EXCELENTE":
            return "¡Felicidades por tu excelente desempeño en " + materia + "!\n\n" +
                   "Recomendaciones:\n" +
                   "• Mantén tu ritmo de estudio actual\n" +
                   "• Ayuda a tus compañeros que tengan dificultades\n" +
                   "• Explora temas avanzados relacionados con la materia";
                
        case "MUY BUENA":
            return "Buen trabajo en " + materia + ", ¡vas por buen camino!\n\n" +
                   "Recomendaciones:\n" +
                   "• Identifica los temas donde puedes mejorar\n" +
                   "• Participa más activamente en clase\n" +
                   "• Realiza ejercicios adicionales para fortalecer tu comprensión";
                
        // ... otros casos ...
                
        case "REPROBADO":
            return "Es importante que tomes acción inmediata en " + materia + ".\n\n" +
                   "Recomendaciones:\n" +
                   "• Solicita una reunión urgente con tu profesor\n" +
                   "• Considera tomar tutorías adicionales\n" +
                   "• Revisa tu método de estudio y haz ajustes\n" +
                   "• Dedica tiempo diario a esta materia\n" +
                   "• Analiza si necesitas reducir carga académica";
                
        default:
            return "Situación no reconocida para " + materia;
    }
}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
